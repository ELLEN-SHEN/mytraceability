// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: traceability/traceability/packet.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TraceabilityPacketData struct {
	// Types that are valid to be assigned to Packet:
	//	*TraceabilityPacketData_NoData
	//	*TraceabilityPacketData_ForbidShipPacket
	//	*TraceabilityPacketData_AllowShipPacket
	//	*TraceabilityPacketData_DestroyDrugPacket
	//	*TraceabilityPacketData_SendDrugPacket
	//	*TraceabilityPacketData_RequestShipPacket
	Packet isTraceabilityPacketData_Packet `protobuf_oneof:"packet"`
}

func (m *TraceabilityPacketData) Reset()         { *m = TraceabilityPacketData{} }
func (m *TraceabilityPacketData) String() string { return proto.CompactTextString(m) }
func (*TraceabilityPacketData) ProtoMessage()    {}
func (*TraceabilityPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad24069641c8e5b2, []int{0}
}
func (m *TraceabilityPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraceabilityPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraceabilityPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TraceabilityPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceabilityPacketData.Merge(m, src)
}
func (m *TraceabilityPacketData) XXX_Size() int {
	return m.Size()
}
func (m *TraceabilityPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceabilityPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_TraceabilityPacketData proto.InternalMessageInfo

type isTraceabilityPacketData_Packet interface {
	isTraceabilityPacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TraceabilityPacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof" json:"noData,omitempty"`
}
type TraceabilityPacketData_ForbidShipPacket struct {
	ForbidShipPacket *ForbidShipPacketData `protobuf:"bytes,6,opt,name=forbidShipPacket,proto3,oneof" json:"forbidShipPacket,omitempty"`
}
type TraceabilityPacketData_AllowShipPacket struct {
	AllowShipPacket *AllowShipPacketData `protobuf:"bytes,5,opt,name=allowShipPacket,proto3,oneof" json:"allowShipPacket,omitempty"`
}
type TraceabilityPacketData_DestroyDrugPacket struct {
	DestroyDrugPacket *DestroyDrugPacketData `protobuf:"bytes,4,opt,name=destroyDrugPacket,proto3,oneof" json:"destroyDrugPacket,omitempty"`
}
type TraceabilityPacketData_SendDrugPacket struct {
	SendDrugPacket *SendDrugPacketData `protobuf:"bytes,3,opt,name=sendDrugPacket,proto3,oneof" json:"sendDrugPacket,omitempty"`
}
type TraceabilityPacketData_RequestShipPacket struct {
	RequestShipPacket *RequestShipPacketData `protobuf:"bytes,2,opt,name=requestShipPacket,proto3,oneof" json:"requestShipPacket,omitempty"`
}

func (*TraceabilityPacketData_NoData) isTraceabilityPacketData_Packet()            {}
func (*TraceabilityPacketData_ForbidShipPacket) isTraceabilityPacketData_Packet()  {}
func (*TraceabilityPacketData_AllowShipPacket) isTraceabilityPacketData_Packet()   {}
func (*TraceabilityPacketData_DestroyDrugPacket) isTraceabilityPacketData_Packet() {}
func (*TraceabilityPacketData_SendDrugPacket) isTraceabilityPacketData_Packet()    {}
func (*TraceabilityPacketData_RequestShipPacket) isTraceabilityPacketData_Packet() {}

func (m *TraceabilityPacketData) GetPacket() isTraceabilityPacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *TraceabilityPacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*TraceabilityPacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (m *TraceabilityPacketData) GetForbidShipPacket() *ForbidShipPacketData {
	if x, ok := m.GetPacket().(*TraceabilityPacketData_ForbidShipPacket); ok {
		return x.ForbidShipPacket
	}
	return nil
}

func (m *TraceabilityPacketData) GetAllowShipPacket() *AllowShipPacketData {
	if x, ok := m.GetPacket().(*TraceabilityPacketData_AllowShipPacket); ok {
		return x.AllowShipPacket
	}
	return nil
}

func (m *TraceabilityPacketData) GetDestroyDrugPacket() *DestroyDrugPacketData {
	if x, ok := m.GetPacket().(*TraceabilityPacketData_DestroyDrugPacket); ok {
		return x.DestroyDrugPacket
	}
	return nil
}

func (m *TraceabilityPacketData) GetSendDrugPacket() *SendDrugPacketData {
	if x, ok := m.GetPacket().(*TraceabilityPacketData_SendDrugPacket); ok {
		return x.SendDrugPacket
	}
	return nil
}

func (m *TraceabilityPacketData) GetRequestShipPacket() *RequestShipPacketData {
	if x, ok := m.GetPacket().(*TraceabilityPacketData_RequestShipPacket); ok {
		return x.RequestShipPacket
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TraceabilityPacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TraceabilityPacketData_NoData)(nil),
		(*TraceabilityPacketData_ForbidShipPacket)(nil),
		(*TraceabilityPacketData_AllowShipPacket)(nil),
		(*TraceabilityPacketData_DestroyDrugPacket)(nil),
		(*TraceabilityPacketData_SendDrugPacket)(nil),
		(*TraceabilityPacketData_RequestShipPacket)(nil),
	}
}

type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad24069641c8e5b2, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

// RequestShipPacketData defines a struct for the packet payload
type RequestShipPacketData struct {
	Dic            string `protobuf:"bytes,1,opt,name=dic,proto3" json:"dic,omitempty"`
	Drugprof       string `protobuf:"bytes,2,opt,name=drugprof,proto3" json:"drugprof,omitempty"`
	Termofvalidity string `protobuf:"bytes,3,opt,name=termofvalidity,proto3" json:"termofvalidity,omitempty"`
	Pharmacy       string `protobuf:"bytes,4,opt,name=pharmacy,proto3" json:"pharmacy,omitempty"`
	Creator        string `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *RequestShipPacketData) Reset()         { *m = RequestShipPacketData{} }
func (m *RequestShipPacketData) String() string { return proto.CompactTextString(m) }
func (*RequestShipPacketData) ProtoMessage()    {}
func (*RequestShipPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad24069641c8e5b2, []int{2}
}
func (m *RequestShipPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestShipPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestShipPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestShipPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestShipPacketData.Merge(m, src)
}
func (m *RequestShipPacketData) XXX_Size() int {
	return m.Size()
}
func (m *RequestShipPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestShipPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_RequestShipPacketData proto.InternalMessageInfo

func (m *RequestShipPacketData) GetDic() string {
	if m != nil {
		return m.Dic
	}
	return ""
}

func (m *RequestShipPacketData) GetDrugprof() string {
	if m != nil {
		return m.Drugprof
	}
	return ""
}

func (m *RequestShipPacketData) GetTermofvalidity() string {
	if m != nil {
		return m.Termofvalidity
	}
	return ""
}

func (m *RequestShipPacketData) GetPharmacy() string {
	if m != nil {
		return m.Pharmacy
	}
	return ""
}

func (m *RequestShipPacketData) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// RequestShipPacketAck defines a struct for the packet acknowledgment
type RequestShipPacketAck struct {
}

func (m *RequestShipPacketAck) Reset()         { *m = RequestShipPacketAck{} }
func (m *RequestShipPacketAck) String() string { return proto.CompactTextString(m) }
func (*RequestShipPacketAck) ProtoMessage()    {}
func (*RequestShipPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad24069641c8e5b2, []int{3}
}
func (m *RequestShipPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestShipPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestShipPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestShipPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestShipPacketAck.Merge(m, src)
}
func (m *RequestShipPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *RequestShipPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestShipPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_RequestShipPacketAck proto.InternalMessageInfo

// SendDrugPacketData defines a struct for the packet payload
type SendDrugPacketData struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *SendDrugPacketData) Reset()         { *m = SendDrugPacketData{} }
func (m *SendDrugPacketData) String() string { return proto.CompactTextString(m) }
func (*SendDrugPacketData) ProtoMessage()    {}
func (*SendDrugPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad24069641c8e5b2, []int{4}
}
func (m *SendDrugPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendDrugPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendDrugPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendDrugPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendDrugPacketData.Merge(m, src)
}
func (m *SendDrugPacketData) XXX_Size() int {
	return m.Size()
}
func (m *SendDrugPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_SendDrugPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_SendDrugPacketData proto.InternalMessageInfo

func (m *SendDrugPacketData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// SendDrugPacketAck defines a struct for the packet acknowledgment
type SendDrugPacketAck struct {
}

func (m *SendDrugPacketAck) Reset()         { *m = SendDrugPacketAck{} }
func (m *SendDrugPacketAck) String() string { return proto.CompactTextString(m) }
func (*SendDrugPacketAck) ProtoMessage()    {}
func (*SendDrugPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad24069641c8e5b2, []int{5}
}
func (m *SendDrugPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendDrugPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendDrugPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendDrugPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendDrugPacketAck.Merge(m, src)
}
func (m *SendDrugPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *SendDrugPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_SendDrugPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_SendDrugPacketAck proto.InternalMessageInfo

// DestroyDrugPacketData defines a struct for the packet payload
type DestroyDrugPacketData struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DestroyDrugPacketData) Reset()         { *m = DestroyDrugPacketData{} }
func (m *DestroyDrugPacketData) String() string { return proto.CompactTextString(m) }
func (*DestroyDrugPacketData) ProtoMessage()    {}
func (*DestroyDrugPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad24069641c8e5b2, []int{6}
}
func (m *DestroyDrugPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DestroyDrugPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DestroyDrugPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DestroyDrugPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestroyDrugPacketData.Merge(m, src)
}
func (m *DestroyDrugPacketData) XXX_Size() int {
	return m.Size()
}
func (m *DestroyDrugPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_DestroyDrugPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_DestroyDrugPacketData proto.InternalMessageInfo

func (m *DestroyDrugPacketData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// DestroyDrugPacketAck defines a struct for the packet acknowledgment
type DestroyDrugPacketAck struct {
}

func (m *DestroyDrugPacketAck) Reset()         { *m = DestroyDrugPacketAck{} }
func (m *DestroyDrugPacketAck) String() string { return proto.CompactTextString(m) }
func (*DestroyDrugPacketAck) ProtoMessage()    {}
func (*DestroyDrugPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad24069641c8e5b2, []int{7}
}
func (m *DestroyDrugPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DestroyDrugPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DestroyDrugPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DestroyDrugPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestroyDrugPacketAck.Merge(m, src)
}
func (m *DestroyDrugPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *DestroyDrugPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_DestroyDrugPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_DestroyDrugPacketAck proto.InternalMessageInfo

// AllowShipPacketData defines a struct for the packet payload
type AllowShipPacketData struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *AllowShipPacketData) Reset()         { *m = AllowShipPacketData{} }
func (m *AllowShipPacketData) String() string { return proto.CompactTextString(m) }
func (*AllowShipPacketData) ProtoMessage()    {}
func (*AllowShipPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad24069641c8e5b2, []int{8}
}
func (m *AllowShipPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllowShipPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllowShipPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllowShipPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowShipPacketData.Merge(m, src)
}
func (m *AllowShipPacketData) XXX_Size() int {
	return m.Size()
}
func (m *AllowShipPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowShipPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_AllowShipPacketData proto.InternalMessageInfo

func (m *AllowShipPacketData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// AllowShipPacketAck defines a struct for the packet acknowledgment
type AllowShipPacketAck struct {
}

func (m *AllowShipPacketAck) Reset()         { *m = AllowShipPacketAck{} }
func (m *AllowShipPacketAck) String() string { return proto.CompactTextString(m) }
func (*AllowShipPacketAck) ProtoMessage()    {}
func (*AllowShipPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad24069641c8e5b2, []int{9}
}
func (m *AllowShipPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllowShipPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllowShipPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllowShipPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowShipPacketAck.Merge(m, src)
}
func (m *AllowShipPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *AllowShipPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowShipPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_AllowShipPacketAck proto.InternalMessageInfo

// ForbidShipPacketData defines a struct for the packet payload
type ForbidShipPacketData struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ForbidShipPacketData) Reset()         { *m = ForbidShipPacketData{} }
func (m *ForbidShipPacketData) String() string { return proto.CompactTextString(m) }
func (*ForbidShipPacketData) ProtoMessage()    {}
func (*ForbidShipPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad24069641c8e5b2, []int{10}
}
func (m *ForbidShipPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForbidShipPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForbidShipPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForbidShipPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForbidShipPacketData.Merge(m, src)
}
func (m *ForbidShipPacketData) XXX_Size() int {
	return m.Size()
}
func (m *ForbidShipPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_ForbidShipPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_ForbidShipPacketData proto.InternalMessageInfo

func (m *ForbidShipPacketData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// ForbidShipPacketAck defines a struct for the packet acknowledgment
type ForbidShipPacketAck struct {
}

func (m *ForbidShipPacketAck) Reset()         { *m = ForbidShipPacketAck{} }
func (m *ForbidShipPacketAck) String() string { return proto.CompactTextString(m) }
func (*ForbidShipPacketAck) ProtoMessage()    {}
func (*ForbidShipPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad24069641c8e5b2, []int{11}
}
func (m *ForbidShipPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForbidShipPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForbidShipPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForbidShipPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForbidShipPacketAck.Merge(m, src)
}
func (m *ForbidShipPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *ForbidShipPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ForbidShipPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_ForbidShipPacketAck proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TraceabilityPacketData)(nil), "traceability.traceability.TraceabilityPacketData")
	proto.RegisterType((*NoData)(nil), "traceability.traceability.NoData")
	proto.RegisterType((*RequestShipPacketData)(nil), "traceability.traceability.RequestShipPacketData")
	proto.RegisterType((*RequestShipPacketAck)(nil), "traceability.traceability.RequestShipPacketAck")
	proto.RegisterType((*SendDrugPacketData)(nil), "traceability.traceability.SendDrugPacketData")
	proto.RegisterType((*SendDrugPacketAck)(nil), "traceability.traceability.SendDrugPacketAck")
	proto.RegisterType((*DestroyDrugPacketData)(nil), "traceability.traceability.DestroyDrugPacketData")
	proto.RegisterType((*DestroyDrugPacketAck)(nil), "traceability.traceability.DestroyDrugPacketAck")
	proto.RegisterType((*AllowShipPacketData)(nil), "traceability.traceability.AllowShipPacketData")
	proto.RegisterType((*AllowShipPacketAck)(nil), "traceability.traceability.AllowShipPacketAck")
	proto.RegisterType((*ForbidShipPacketData)(nil), "traceability.traceability.ForbidShipPacketData")
	proto.RegisterType((*ForbidShipPacketAck)(nil), "traceability.traceability.ForbidShipPacketAck")
}

func init() {
	proto.RegisterFile("traceability/traceability/packet.proto", fileDescriptor_ad24069641c8e5b2)
}

var fileDescriptor_ad24069641c8e5b2 = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x9b, 0xae, 0x84, 0xe6, 0x43, 0x2a, 0x9b, 0x9b, 0x56, 0x85, 0x43, 0xc4, 0x22, 0x28,
	0x5c, 0xc8, 0x10, 0x1c, 0x77, 0xea, 0x54, 0x21, 0x4e, 0x08, 0x79, 0x48, 0x48, 0x93, 0x90, 0x70,
	0x63, 0x77, 0xb3, 0x9a, 0xcd, 0xc1, 0x71, 0x81, 0xbc, 0x05, 0xef, 0xc0, 0x43, 0xf0, 0x0a, 0x1c,
	0x77, 0xe4, 0x88, 0xda, 0x17, 0x41, 0x71, 0xb3, 0x29, 0xb1, 0x43, 0xb8, 0xf9, 0x73, 0xbe, 0xdf,
	0x4f, 0x7f, 0xd9, 0x5f, 0x0c, 0x53, 0x25, 0x49, 0xcc, 0xc8, 0x82, 0x27, 0x5c, 0xe5, 0x47, 0xb5,
	0x22, 0x25, 0xf1, 0x8a, 0xa9, 0x28, 0x95, 0x42, 0x09, 0xf4, 0xa0, 0xfa, 0x29, 0xaa, 0x16, 0xe1,
	0xcf, 0x1e, 0x8c, 0xdf, 0x57, 0x36, 0xde, 0x69, 0x6e, 0x4e, 0x14, 0x41, 0xc7, 0xe0, 0x5e, 0x89,
	0x62, 0x35, 0x71, 0x1e, 0x39, 0xcf, 0xee, 0xbd, 0x3c, 0x8c, 0xfe, 0xa9, 0x89, 0xde, 0xea, 0xc6,
	0x37, 0x1d, 0x5c, 0x22, 0xe8, 0x23, 0xec, 0x2f, 0x85, 0x5c, 0x70, 0x7a, 0x7a, 0xc1, 0xd3, 0x9d,
	0x74, 0xe2, 0x6a, 0xcd, 0x51, 0x8b, 0xe6, 0xb5, 0x81, 0x94, 0x52, 0x4b, 0x85, 0xce, 0xe0, 0x3e,
	0x49, 0x12, 0xf1, 0xb5, 0x62, 0xbf, 0xa3, 0xed, 0x51, 0x8b, 0x7d, 0x56, 0x27, 0x4a, 0xb9, 0x29,
	0x42, 0x9f, 0xe0, 0x80, 0xb2, 0x4c, 0x49, 0x91, 0xcf, 0xe5, 0xfa, 0xbc, 0xb4, 0xf7, 0xb4, 0xfd,
	0x45, 0x8b, 0x7d, 0x6e, 0x32, 0xa5, 0xdf, 0x96, 0xa1, 0x0f, 0x30, 0xc8, 0xd8, 0x15, 0xad, 0xe8,
	0xf7, 0xb4, 0xfe, 0x79, 0x8b, 0xfe, 0xb4, 0x06, 0x94, 0x6e, 0x43, 0x53, 0x44, 0x97, 0xec, 0xf3,
	0x9a, 0x65, 0xaa, 0x72, 0x30, 0xdd, 0xff, 0x46, 0xc7, 0x26, 0x73, 0x13, 0xdd, 0x92, 0x9d, 0xf4,
	0xc1, 0xdd, 0x8d, 0x56, 0xd8, 0x07, 0x77, 0x77, 0xeb, 0xe1, 0x0f, 0x07, 0x46, 0x8d, 0x0a, 0xb4,
	0x0f, 0x7b, 0x94, 0xc7, 0x7a, 0x7e, 0x3c, 0x5c, 0x2c, 0xd1, 0x43, 0xe8, 0x53, 0xb9, 0x3e, 0x4f,
	0xa5, 0x58, 0xea, 0x60, 0x1e, 0xbe, 0xad, 0xd1, 0x14, 0x06, 0x8a, 0xc9, 0x4b, 0xb1, 0xfc, 0x42,
	0x12, 0x4e, 0xb9, 0xca, 0xf5, 0xb1, 0x78, 0xd8, 0xd8, 0x2d, 0x1c, 0xe9, 0x05, 0x91, 0x97, 0x24,
	0xce, 0xf5, 0xbd, 0x78, 0xf8, 0xb6, 0x46, 0x13, 0xb8, 0x1b, 0x4b, 0x46, 0x94, 0x90, 0x7a, 0x20,
	0x3c, 0x7c, 0x53, 0x86, 0x63, 0xf0, 0xad, 0x90, 0xb3, 0x78, 0x15, 0x3e, 0x06, 0x64, 0x9f, 0x2d,
	0x1a, 0x40, 0x97, 0x53, 0x1d, 0xbc, 0x87, 0xbb, 0x9c, 0x86, 0x43, 0x38, 0xa8, 0x77, 0x15, 0xe8,
	0x53, 0x18, 0x35, 0xde, 0xba, 0x45, 0x8f, 0xc1, 0xb7, 0x1a, 0x0b, 0xc1, 0x13, 0x18, 0x36, 0x0c,
	0xa5, 0x85, 0xfb, 0x80, 0x8c, 0xb6, 0x02, 0x9e, 0x82, 0xdf, 0xf4, 0xbf, 0x58, 0xf4, 0x08, 0x86,
	0x66, 0xdf, 0x2c, 0x5e, 0x9d, 0x1c, 0xff, 0xda, 0x04, 0xce, 0xf5, 0x26, 0x70, 0xfe, 0x6c, 0x02,
	0xe7, 0xfb, 0x36, 0xe8, 0x5c, 0x6f, 0x83, 0xce, 0xef, 0x6d, 0xd0, 0x39, 0x3b, 0xac, 0xbd, 0x24,
	0xdf, 0xea, 0x0f, 0x8b, 0xca, 0x53, 0x96, 0x2d, 0x5c, 0xfd, 0xb0, 0xbc, 0xfa, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x4b, 0xb2, 0x75, 0x9e, 0x82, 0x04, 0x00, 0x00,
}

func (m *TraceabilityPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceabilityPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TraceabilityPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TraceabilityPacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TraceabilityPacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *TraceabilityPacketData_RequestShipPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TraceabilityPacketData_RequestShipPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestShipPacket != nil {
		{
			size, err := m.RequestShipPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *TraceabilityPacketData_SendDrugPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TraceabilityPacketData_SendDrugPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SendDrugPacket != nil {
		{
			size, err := m.SendDrugPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *TraceabilityPacketData_DestroyDrugPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TraceabilityPacketData_DestroyDrugPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DestroyDrugPacket != nil {
		{
			size, err := m.DestroyDrugPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *TraceabilityPacketData_AllowShipPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TraceabilityPacketData_AllowShipPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowShipPacket != nil {
		{
			size, err := m.AllowShipPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *TraceabilityPacketData_ForbidShipPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TraceabilityPacketData_ForbidShipPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForbidShipPacket != nil {
		{
			size, err := m.ForbidShipPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RequestShipPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestShipPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestShipPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Pharmacy) > 0 {
		i -= len(m.Pharmacy)
		copy(dAtA[i:], m.Pharmacy)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Pharmacy)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Termofvalidity) > 0 {
		i -= len(m.Termofvalidity)
		copy(dAtA[i:], m.Termofvalidity)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Termofvalidity)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Drugprof) > 0 {
		i -= len(m.Drugprof)
		copy(dAtA[i:], m.Drugprof)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Drugprof)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestShipPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestShipPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestShipPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SendDrugPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendDrugPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendDrugPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SendDrugPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendDrugPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendDrugPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DestroyDrugPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DestroyDrugPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DestroyDrugPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DestroyDrugPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DestroyDrugPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DestroyDrugPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AllowShipPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowShipPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowShipPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllowShipPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowShipPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowShipPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ForbidShipPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForbidShipPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForbidShipPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForbidShipPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForbidShipPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForbidShipPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TraceabilityPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *TraceabilityPacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *TraceabilityPacketData_RequestShipPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestShipPacket != nil {
		l = m.RequestShipPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *TraceabilityPacketData_SendDrugPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendDrugPacket != nil {
		l = m.SendDrugPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *TraceabilityPacketData_DestroyDrugPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestroyDrugPacket != nil {
		l = m.DestroyDrugPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *TraceabilityPacketData_AllowShipPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowShipPacket != nil {
		l = m.AllowShipPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *TraceabilityPacketData_ForbidShipPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForbidShipPacket != nil {
		l = m.ForbidShipPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestShipPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Drugprof)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Termofvalidity)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Pharmacy)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *RequestShipPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SendDrugPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPacket(uint64(m.Id))
	}
	return n
}

func (m *SendDrugPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DestroyDrugPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPacket(uint64(m.Id))
	}
	return n
}

func (m *DestroyDrugPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AllowShipPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPacket(uint64(m.Id))
	}
	return n
}

func (m *AllowShipPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ForbidShipPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPacket(uint64(m.Id))
	}
	return n
}

func (m *ForbidShipPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TraceabilityPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceabilityPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceabilityPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &TraceabilityPacketData_NoData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestShipPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestShipPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &TraceabilityPacketData_RequestShipPacket{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendDrugPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SendDrugPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &TraceabilityPacketData_SendDrugPacket{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestroyDrugPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DestroyDrugPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &TraceabilityPacketData_DestroyDrugPacket{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowShipPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AllowShipPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &TraceabilityPacketData_AllowShipPacket{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForbidShipPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForbidShipPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &TraceabilityPacketData_ForbidShipPacket{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestShipPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestShipPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestShipPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drugprof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Drugprof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Termofvalidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Termofvalidity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pharmacy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pharmacy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestShipPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestShipPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestShipPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendDrugPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendDrugPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendDrugPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendDrugPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendDrugPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendDrugPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DestroyDrugPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestroyDrugPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestroyDrugPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DestroyDrugPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestroyDrugPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestroyDrugPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllowShipPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowShipPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowShipPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllowShipPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowShipPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowShipPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForbidShipPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForbidShipPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForbidShipPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForbidShipPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForbidShipPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForbidShipPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
